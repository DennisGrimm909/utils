<html>

<head>
</head>

<body>
	<button onclick="connect()">Connect to //code.Node</button>
	<button onclick="led(0,0,0)">Single LED off</button>
	<button onclick="led(0,0,255)">Single LED on</button>
	<button onclick="setRGB(255,0,0)">Red</button>
	<button onclick="setRGB(0,255,0)">Green</button>
	<button onclick="setRGB(0,0,255)">Blue</button>
	<button onclick="setPattern([[true, false, true, false, true],[false, true, false, true, false],[true, false, true, false, true],[false, true, false, true, false],[true, false, true, false, true]],128)">Set Pattern</button>
	<button onclick="playTune([[note_C4, 4], [note_G3, 8], [note_silent, 0.1], [note_G3, 8], [note_A3, 4], [note_G3, 4], [note_silent, 4], [note_B3, 4], [note_C4,4], [note_silent,0]])">Play Tune</button>
	<button onclick="reset()">Reset</button>
	
	<script>


	const GCMD_CODENODE_CMD = 0x37;
	const CODENODE_CMD_SET_LED = 0X02;
	const CODENODE_CMD_SET_LEDS = 0X03;
	const CODENODE_CMD_SET_SOUND_FREQ = 0X04;
	const GCMD_CUSTOM_CMD = 0x37
	    const GCMD_CONTROL_NODE_CMD = 0x37
	    const CTRLNODE_CMD_DETECT_DEVICES = 2 // Detects which devices are attached
	    const GCMD_READ_ONE_SAMPLE = 0x05
	    const GCMD_XFER_BURST_RAM = 0X0E
	    const GRSP_RESULT = 0XC0 // Generic response packet
	    const GEVT_SENSOR_ID = 0x82 // Get Sensor ID (for AirLink)

	    WIRELESS_RMS_START = [0X37, 0X01, 0X00]

	    // service id
	    const SENSOR_SERVICE_ID = 0
	    const pasport_service_id = 1 // airlink?
	    // characteristic ids
	    const SEND_CMD_CHAR_ID = 2
	    const RECV_CMD_CHAR_ID = 3 //  not used?
	    const SEND_ACK_CHAR_ID = 5

	    const SERVICE_UUID = "4a5c000" + SENSOR_SERVICE_ID + "-000" + "0" + "-0000-0000-5c1e741f1c00";
	const CHARACTERISTIC_TX = "4a5c000" + SENSOR_SERVICE_ID + "-000" + SEND_CMD_CHAR_ID + "-0000-0000-5c1e741f1c00";
	const CHARACTERISTIC_RX = "4a5c000" + SENSOR_SERVICE_ID + "-000" + RECV_CMD_CHAR_ID + "-0000-0000-5c1e741f1c00";

	function CHARACTERISTIC_ACK(sensorId) {
	    return "4a5c000" + (sensorId + 1) + "-000" + SEND_ACK_CHAR_ID + "-0000-0000-5c1e741f1c00";
	}

	function characteristicValueChanged(event, name) {
	    console.log("characteristicValueChanged", event, name);

	    return;

	}
	// eg ["GoCube2x2_14FA90", "GoDice_A757B5_B_v04", "GoDice_B7D0A7_K_v04"]
	window.names = [];
	// all these indexed by eg names[0]
	var ids = [];
	var devices = [];
	window.services = [];
	var servers = [];
	window.characteristics = [];
	var descriptorses = [];

	function addDevice(device) {
	    if (names.includes(device.name)) {
	        console.log(device.name + " already connected");
	        return;
	    }
	    names.push(device.name);
	    ids[device.name] = device.id;
	    return device.gatt.connect().then(server => {
	        console.log("server", server);
	        server[device.name] = server;
	        return server.getPrimaryService(SERVICE_UUID);
	    }).then(service => {
	        console.log("service", service);
	        services[device.name] = service;
	        return service.getCharacteristic(CHARACTERISTIC_TX);
	    }).then(characteristic => {
	        console.log("characteristic", characteristic);
	        characteristics[device.name] = characteristic;

	        services[names[0]].getCharacteristic(CHARACTERISTIC_RX).then(characteristicRX => {

	            console.log("CHARACTERISTIC_RX", characteristicRX);

	            characteristicRX.addEventListener('characteristicvaluechanged', function (event) {
	                characteristicValueChanged(event, device.name)
	            });

	        });

	        //return characteristic.getDescriptors();
	    }).then(descriptors => {
	        console.log("descriptors", descriptors);
	        descriptorses[device.name] = descriptors;
	        // https://www.bluetooth.com/specifications/assigned-numbers/
	        // 0x2902 = Client Characteristic Configuration
	        // GoDice return BluetoothRemoteGATTDescriptor with uuid: "00002902-0000-1000-8000-00805f9b34fb"
	    }).catch(e => {
	        console.log(e, device);
	        // (probably) automatic connection failed, remove from 'names' so that user can still connect with browser dialog
	        names.pop(device.name);
	    })
	}

	function connect() {
	    // https://googlechrome.github.io/samples/web-bluetooth/device-info.html
	    let filters = [];
	    // name is eg //code.Node 123-456>G0
	    filters.push({
	        namePrefix: "//code.Node"
	    });
	    let options = {
	        "optionalServices": [SERVICE_UUID]
	    };

	    // either one of these lines
	    options.filters = filters;
	    //options.acceptAllDevices = true;


	    navigator.bluetooth.requestDevice(options).then(device => {
	        console.log('> Name:             ' + device.name);
	        console.log('> Id:               ' + device.id);
	        console.log('> Connected:        ' + device.gatt.connected);
	        addDevice(device);
	    })
	}
	// check if any dice already have user permission on the page
	// allows devices to work after page refresh
	// https://googlechrome.github.io/samples/web-bluetooth/get-devices.html
	navigator.bluetooth.getDevices().then(devices => {
	    console.log('> Found ' + devices.length + ' Bluetooth devices:');
	    for (const device of devices) {
	        console.log(device.name);
	        if (device.name.startsWith("GoCube")) {
	            addDevice(device);
	        }
	    }
	})

	function sendCommand(message) {
	    service = services[names[0]];
	    service.getCharacteristic(CHARACTERISTIC_TX).then(characteristic => {
	        console.log("sending message ", message);
	        characteristic.writeValue(new Uint8Array(message)).then(message => {

	            console.log("message", message);

	        });
	    });
	}

	// TODO
	function sendACK(message) {
	    // service_id = sensor_id + 1
	    //                    command = [ data[0] ]
	    //                    self._send_ack(service_id, command)
	    service = services[names[0]];
	    service.getCharacteristic(CHARACTERISTIC_ACK(0)).then(characteristic => {
	        console.log("sending message ", message);
	        characteristic.writeValue(new Uint8Array(message)).then(message => {

	            console.log("message", message);

	        });
	    });
	}

	// x: 0 - 4
	// y: 0 - 4
	// intensity 0 - 255
	function led(x, y, intensity) {

	    var cmd = [GCMD_CODENODE_CMD, CODENODE_CMD_SET_LED, ledIndex(x, y), intensity];
	    sendCommand(cmd);
	}

	function allOn() {

	    var cmd = [GCMD_CODENODE_CMD, CODENODE_CMD_SET_LEDS, 0xff, 0xff, 0xff, 0xff, 0xff];

	    sendCommand(cmd);

	}

	function allOff() {
	    var cmd = [GCMD_CODENODE_CMD, CODENODE_CMD_SET_LEDS, 0xff, 0xff, 0xff, 0xff, 0x00];

	    sendCommand(cmd);

	}

	// Converts xy position to LED index
	function ledIndex(x, y) {
	    return 20 - (y * 5) + x;
	}

	function setPattern(pattern, intensity) {

	    var bits = 0;

	    for (var x = 0; x < 5; x++) {
	        for (var y = 0; y < 5; y++) {
	            if (pattern[x][y]) {
	                bits += (1 << ledIndex(x, y));
	            }
	        }
	    }

	    var cmd = [GCMD_CODENODE_CMD, CODENODE_CMD_SET_LEDS, bits & 0xFF, (bits >> 8) & 0XFF, (bits >> 16) & 0XFF, (bits >> 24) & 0XFF, intensity];
	    sendCommand(cmd);

	}

	function setRGB(r, g, b) {
	    var cmd = [GCMD_CODENODE_CMD, CODENODE_CMD_SET_LEDS, r, g, b, 0x80, 0x00];
	    sendCommand(cmd);

	}

	function playNote(frequency) {

	    var cmd = [GCMD_CODENODE_CMD, CODENODE_CMD_SET_SOUND_FREQ, frequency & 0xFF, (frequency >> 8) & 0XFF];
	    sendCommand(cmd);

	}

	function reset() {
	    playNote(0);
	    // TODO: need to have a queue for commands
	    //setRGB(0,0,0);
	    //allOff();
	}

	const note_silent = 0
	    const note_B0 = 31
	    const note_C1 = 33
	    const note_CS1 = 35
	    const note_D1 = 37
	    const note_DS1 = 39
	    const note_E1 = 41
	    const note_F1 = 44
	    const note_FS1 = 46
	    const note_G1 = 49
	    const note_GS1 = 52
	    const note_A1 = 55
	    const note_AS1 = 58
	    const note_B1 = 62
	    const note_C2 = 65
	    const note_CS2 = 69
	    const note_D2 = 73
	    const note_DS2 = 78
	    const note_E2 = 82
	    const note_F2 = 87
	    const note_FS2 = 93
	    const note_G2 = 98
	    const note_GS2 = 104
	    const note_A2 = 110
	    const note_AS2 = 117
	    const note_B2 = 123
	    const note_C3 = 131
	    const note_CS3 = 139
	    const note_D3 = 147
	    const note_DS3 = 156
	    const note_E3 = 165
	    const note_F3 = 175
	    const note_FS3 = 185
	    const note_G3 = 196
	    const note_GS3 = 208
	    const note_A3 = 220
	    const note_AS3 = 233
	    const note_B3 = 247
	    const note_C4 = 262
	    const note_CS4 = 277
	    const note_D4 = 294
	    const note_DS4 = 311
	    const note_E4 = 330
	    const note_F4 = 349
	    const note_FS4 = 370
	    const note_G4 = 392
	    const note_GS4 = 415
	    const note_A4 = 440
	    const note_AS4 = 466
	    const note_B4 = 494
	    const note_C5 = 523
	    const note_CS5 = 554
	    const note_D5 = 587
	    const note_DS5 = 622
	    const note_E5 = 659
	    const note_F5 = 698
	    const note_FS5 = 740
	    const note_G5 = 784
	    const note_GS5 = 831
	    const note_A5 = 880
	    const note_AS5 = 932
	    const note_B5 = 988
	    const note_C6 = 1047
	    const note_CS6 = 1109
	    const note_D6 = 1175
	    const note_DS6 = 1245
	    const note_E6 = 1319
	    const note_F6 = 1397
	    const note_FS6 = 1480
	    const note_G6 = 1568
	    const note_GS6 = 1661
	    const note_A6 = 1760
	    const note_AS6 = 1865
	    const note_B6 = 1976
	    const note_C7 = 2093
	    const note_CS7 = 2217
	    const note_D7 = 2349
	    const note_DS7 = 2489
	    const note_E7 = 2637
	    const note_F7 = 2794
	    const note_FS7 = 2960
	    const note_G7 = 3136
	    const note_GS7 = 3322
	    const note_A7 = 3520
	    const note_AS7 = 3729
	    const note_B7 = 3951
	    const note_C8 = 4186
	    const note_CS8 = 4435
	    const note_D8 = 4699
	    const note_DS8 = 4978

	    const notes = [[note_C4, 4], [note_G3, 8], [note_G3, 8], [note_A3, 4], [note_G3, 4], [note_silent, 4], [note_B3, 4], [note_C4, 4], [note_silent, 0]];

	function playTune(notes) {

	    var callback = function () {
	        var note = notes.shift();
	        var frequency = note[0];
	        var time = note[1] * 100;
	        console.log(note, frequency, time);
	        playNote(frequency);
	        if (notes.length > 0) {
	            setTimeout(callback, time);
	        }

	    };
	    setTimeout(callback, 1);

	}

	function detect() {
	    var cmd = [GCMD_CONTROL_NODE_CMD, CTRLNODE_CMD_DETECT_DEVICES];
	    sendCommand(cmd);
	    // TODO: how do we get the result back?

	}
	
	</script>
</body>

</html>
